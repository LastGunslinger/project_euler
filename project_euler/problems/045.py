prompt = '''

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	T(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P(n)=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	H(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''

from itertools import count
from logging import Logger
from typing import Iterable


def generate_triangle(start: int = 0) -> Iterable[int]:
    '''Generate triangle numbers starting at start'''
    for n in count(start):
        yield int(n * (n + 1) / 2)


def generate_pentagonal(start: int = 0) -> Iterable[int]:
    '''Generate triangle numbers starting at start'''
    for n in count(start):
        yield int(n * ((3 * n) - 1) / 2)


def generate_hexagonal(start: int = 0) -> Iterable[int]:
    '''Generate triangle numbers starting at start'''
    for n in count(start):
        yield int(n * ((2 * n) - 1))


def solve(logger: Logger) -> int:
    logger.debug(prompt)
    t_start = 285 + 1
    p_start = 165
    h_start = 143

    for triangle in generate_triangle(t_start):
        print(f'{triangle}')
        for pentagonal in generate_pentagonal(p_start):
            if pentagonal < triangle:
                p_start += 1
            elif pentagonal > triangle:
                # p_start -= 1
                break
            else:
                for hexagonal in generate_hexagonal(h_start):
                    if hexagonal < pentagonal:
                        h_start += 1
                    elif hexagonal > pentagonal:
                        # h_start -= 1
                        break
                    else:
                        return hexagonal
